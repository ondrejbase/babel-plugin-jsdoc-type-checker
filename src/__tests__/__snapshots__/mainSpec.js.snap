// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`main should add an import statement to Foo's file 1`] = `
"import invariant from 'invariant';

/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns the sum of x, y (optional).
   *
   * @typechecked
   * @param {number} x The first number.
   * @param {number} [y=0] The second number.
   * @return {number} The sum of x and y.
   */
  sum(x, y = 0) {
    invariant(!(typeof x !== 'number'), 'Foo.sum(x, [y]): Argument x expected to be a number.');
    invariant(!(y !== null && y !== undefined && typeof y !== 'number'), 'Foo.sum(x, [y]): Argument [y] expected to be a number.');
    return x + y;
  }

}"
`;

exports[`main should add an import statement to Foo's file, because it has been renamed 1`] = `
"import invariant from 'invariant';
import { default as aliasedInvariant } from 'invariant';
/**
 * Class Foo.
 */

class Foo {
  /**
   * Returns the sum of x, y (optional).
   *
   * @typechecked
   * @param {number} x The first number.
   * @param {number} [y=0] The second number.
   * @return {number} The sum of x and y.
   */
  sum(x, y = 0) {
    invariant(!(typeof x !== 'number'), 'Foo.sum(x, [y]): Argument x expected to be a number.');
    invariant(!(y !== null && y !== undefined && typeof y !== 'number'), 'Foo.sum(x, [y]): Argument [y] expected to be a number.');
    return x + y;
  }

}"
`;

exports[`main should not add an import statement to Foo's file, because it is already there (default as) 1`] = `
"import { default as invariant } from 'invariant';
/**
 * Class Foo.
 */

class Foo {
  /**
   * Returns the sum of x, y (optional).
   *
   * @typechecked
   * @param {number} x The first number.
   * @param {number} [y=0] The second number.
   * @return {number} The sum of x and y.
   */
  sum(x, y = 0) {
    invariant(!(typeof x !== 'number'), 'Foo.sum(x, [y]): Argument x expected to be a number.');
    invariant(!(y !== null && y !== undefined && typeof y !== 'number'), 'Foo.sum(x, [y]): Argument [y] expected to be a number.');
    return x + y;
  }

}"
`;

exports[`main should not add an import statement to Foo's file, because it is already there 1`] = `
"import invariant from 'invariant';
/**
 * Class Foo.
 */

class Foo {
  /**
   * Returns the sum of x, y (optional).
   *
   * @typechecked
   * @param {number} x The first number.
   * @param {number} [y=0] The second number.
   * @return {number} The sum of x and y.
   */
  sum(x, y = 0) {
    invariant(!(typeof x !== 'number'), 'Foo.sum(x, [y]): Argument x expected to be a number.');
    invariant(!(y !== null && y !== undefined && typeof y !== 'number'), 'Foo.sum(x, [y]): Argument [y] expected to be a number.');
    return x + y;
  }

}"
`;

exports[`main should not generate anything because the checker tag is not present 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns the sum of x, y (optional).
   *
   * @param {number} x The first number.
   * @param {number} [y=0] The second number.
   * @return {number} The sum of x and y.
   */
  sum(x, y = 0) {
    return x + y;
  }

}"
`;

exports[`main should not generate anything because the environment is production 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns the sum of x, y (optional).
   *
   * @typechecked
   * @param {number} x The first number.
   * @param {number} [y=0] The second number.
   * @return {number} The sum of x and y.
   */
  sum(x, y = 0) {
    return x + y;
  }

}"
`;

exports[`main should prepend a type checking to Foo#and() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Computes a logical AND of x and y (optional).
   *
   * @typechecked
   * @param {boolean} x The first boolean value.
   * @param {boolean=} y The second boolean value.
   * @return {boolean} The logical and of x and y.
   */
  and(x, y) {
    if (typeof x !== 'boolean') {
      throw new TypeError('Foo.and(x, y): Argument x expected to be a boolean.');
    }

    if (y !== null && y !== undefined && typeof y !== 'boolean') {
      throw new TypeError('Foo.and(x, y): Argument [y] expected to be a boolean.');
    }

    return x && (y !== null && y !== undefined ? y : true);
  }

}"
`;

exports[`main should prepend a type checking to Foo#concat() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Concats strings x and y (optional).
   *
   * @typechecked
   * @param {string} x The first string.
   * @param {string} [y=''] The second string.
   * @return {string} The concatenation of x and y.
   */
  concat(x, y = '') {
    if (typeof x !== 'string') {
      throw new TypeError('Foo.concat(x, [y]): Argument x expected to be a string.');
    }

    if (y !== null && y !== undefined && typeof y !== 'string') {
      throw new TypeError('Foo.concat(x, [y]): Argument [y] expected to be a string.');
    }

    return x + y;
  }

}"
`;

exports[`main should prepend a type checking to Foo#joinArray() and Foo#joinArray2() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Joins the elements of an array into a string, and returns the
   * string.
   *
   * @typechecked
   * @param {string[]} arr An array of strings.
   * @return {string} [separator=','] The separator to be used.
   * @return {string} A String, representing the array values,
   *         separated by the specified separator.
   */
  joinArray(arr, separator = ',') {
    if (Object.prototype.toString.call(arr) !== '[object Array]') {
      throw new TypeError('Foo.joinArray(arr): Argument arr expected to be an array.');
    }

    if (Object.prototype.toString.call(arr) === '[object Array]' && arr.length > 0 && typeof arr[0] !== 'string') {
      throw new TypeError('Foo.joinArray(arr): Argument arr[0] expected to be a string.');
    }

    return arr.join(separator);
  }
  /**
   * Joins the elements of an array into a string, and returns the
   * string.
   *
   * @typechecked
   * @param {Array<string>=} arr An array of strings.
   * @return {string} [separator=','] The separator to be used.
   * @return {string} A String, representing the array values,
   *         separated by the specified separator.
   */


  joinArray2(arr, separator = ',') {
    if (arr !== null && arr !== undefined && Object.prototype.toString.call(arr) !== '[object Array]') {
      throw new TypeError('Foo.joinArray2(arr): Argument [arr] expected to be an array.');
    }

    if (Object.prototype.toString.call(arr) === '[object Array]' && arr.length > 0 && typeof arr[0] !== 'string') {
      throw new TypeError('Foo.joinArray2(arr): Argument arr[0] expected to be a string.');
    }

    return (arr || []).join(separator);
  }

}"
`;

exports[`main should prepend a type checking to Foo#negate() and Foo#negate2() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Negates the given value.
   *
   * @typechecked
   * @param {(boolean|number|string)} value A value.
   * @return {boolean} The logically negated value.
   */
  negate(value) {
    if (typeof value !== 'boolean' && typeof value !== 'number' && typeof value !== 'string') {
      throw new TypeError('Foo.negate(value): Argument value expected to be a boolean or a number or a string.');
    }

    return !value;
  }
  /**
   * Negates the given value.
   *
   * @typechecked
   * @param {!(boolean|number|string)=} value A value.
   * @return {boolean} The logically negated value.
   */


  negate2(value) {
    if ((value !== null && value !== undefined && typeof value !== 'boolean' || value === null) && (value !== null && value !== undefined && typeof value !== 'number' || value === null) && (value !== null && value !== undefined && typeof value !== 'string' || value === null)) {
      throw new TypeError('Foo.negate2(value): Argument [value] expected to be a boolean or a number or a string.');
    }

    return !value;
  }

}"
`;

exports[`main should prepend a type checking to Foo#processUserInput() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Waits for a user input and then calls a callback.
   *
   * @typechecked
   * @param {function} callback A callback which is called with
   *        a user input as an argument.
   */
  processUserInput(callback) {
    if (typeof callback !== 'function') {
      throw new TypeError('Foo.processUserInput(callback): Argument callback expected to be a function.');
    }

    var name = prompt('Please enter your name.');
    callback(name);
  }

}"
`;

exports[`main should prepend a type checking to Foo#push(), Foo#push2() and Foo#push3() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Adds one or more elements to the end of an array and returns
   * the new length of the array.
   *
   * @typechecked
   * @param {Array} arr The array to be extended.
   * @param {...(number|string)} [elements] The elements to add to
   *        the end of the array.
   * @return {number} The new length property of the array.
   */
  push(arr, ...elements) {
    if (Object.prototype.toString.call(arr) !== '[object Array]') {
      throw new TypeError('Foo.push(arr, [elements]): Argument arr expected to be an array.');
    }

    if (Array.prototype.slice.call(arguments, 1)[0] !== null && Array.prototype.slice.call(arguments, 1)[0] !== undefined && typeof Array.prototype.slice.call(arguments, 1)[0] !== 'number' && Array.prototype.slice.call(arguments, 1)[0] !== null && Array.prototype.slice.call(arguments, 1)[0] !== undefined && typeof Array.prototype.slice.call(arguments, 1)[0] !== 'string') {
      throw new TypeError('Foo.push(arr, [elements]): Argument [Array.prototype.slice.call(arguments, 1)[0]] expected to be a number or a string.');
    }

    return arr.push(...elements);
  }
  /**
   * Adds one or more elements to the end of an array and returns
   * the new length of the array.
   *
   * @typechecked
   * @param {Array} arr The array to be extended.
   * @param {...(number|string)=} elements The elements to add to
   *        the end of the array.
   * @return {number} The new length property of the array.
   */


  push2(arr, ...elements) {
    if (Object.prototype.toString.call(arr) !== '[object Array]') {
      throw new TypeError('Foo.push2(arr, elements): Argument arr expected to be an array.');
    }

    if (Array.prototype.slice.call(arguments, 1)[0] !== null && Array.prototype.slice.call(arguments, 1)[0] !== undefined && typeof Array.prototype.slice.call(arguments, 1)[0] !== 'number' && Array.prototype.slice.call(arguments, 1)[0] !== null && Array.prototype.slice.call(arguments, 1)[0] !== undefined && typeof Array.prototype.slice.call(arguments, 1)[0] !== 'string') {
      throw new TypeError('Foo.push2(arr, elements): Argument [Array.prototype.slice.call(arguments, 1)[0]] expected to be a number or a string.');
    }

    return arr.push(...elements);
  }
  /**
   * Adds one or more elements to the end of an array and returns
   * the new length of the array.
   *
   * @typechecked
   * @param {Array} arr The array to be extended.
   * @param {...*} [elements] The elements to add to
   *        the end of the array.
   * @return {number} The new length property of the array.
   */


  push3(arr, ...elements) {
    if (Object.prototype.toString.call(arr) !== '[object Array]') {
      throw new TypeError('Foo.push3(arr, [elements]): Argument arr expected to be an array.');
    }

    return arr.push(...elements);
  }

}"
`;

exports[`main should prepend a type checking to Foo#size() and Foo#size2() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Counts properties of the object.
   *
   * @typechecked
   * @param {!object=} obj The object.
   * @return {number} A count of the object's properties.
   */
  size(obj) {
    if (obj !== null && obj !== undefined && Object.prototype.toString.call(obj) !== '[object Object]' || obj === null) {
      throw new TypeError('Foo.size(obj): Argument [obj] expected to be an object.');
    }

    return Object.keys(obj).length;
  }
  /**
   * Counts properties of the object.
   *
   * @typechecked
   * @param {?object=} obj The object or null.
   * @return {number} A count of the object's properties.
   */


  size2(obj) {
    if (obj !== null && obj !== undefined && Object.prototype.toString.call(obj) !== '[object Object]' && obj !== null) {
      throw new TypeError('Foo.size2(obj): Argument [obj] expected to be an object.');
    }

    return Object.keys(obj || {}).length;
  }

}"
`;

exports[`main should prepend a type checking to Foo#sum() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns the sum of x, y (optional).
   *
   * @typechecked
   * @param {number} x The first number.
   * @param {number} [y=0] The second number.
   * @return {number} The sum of x and y.
   */
  sum(x, y = 0) {
    if (typeof x !== 'number') {
      throw new TypeError('Foo.sum(x, [y]): Argument x expected to be a number.');
    }

    if (y !== null && y !== undefined && typeof y !== 'number') {
      throw new TypeError('Foo.sum(x, [y]): Argument [y] expected to be a number.');
    }

    return x + y;
  }

}"
`;

exports[`main should prepend a type checking to Foo#sum() because the checker tag is present on the class level 1`] = `
"/**
 * Class Foo.
 *
 * @typechecked
 */
class Foo {
  /**
   * Returns the sum of x, y (optional).
   *
   * @param {number} x The first number.
   * @param {number} [y=0] The second number.
   * @return {number} The sum of x and y.
   */
  sum(x, y = 0) {
    if (typeof x !== 'number') {
      throw new TypeError('Foo.sum(x, [y]): Argument x expected to be a number.');
    }

    if (y !== null && y !== undefined && typeof y !== 'number') {
      throw new TypeError('Foo.sum(x, [y]): Argument [y] expected to be a number.');
    }

    return x + y;
  }

}"
`;

exports[`main should prepend a type checking to Foo#sum() because the checker tag is present on the export default level 1`] = `
"/**
 * Class Foo.
 *
 * @typechecked
 */
export default class Foo {
  /**
   * Returns the sum of x, y (optional).
   *
   * @param {number} x The first number.
   * @param {number} [y=0] The second number.
   * @return {number} The sum of x and y.
   */
  sum(x, y = 0) {
    if (typeof x !== 'number') {
      throw new TypeError('Foo.sum(x, [y]): Argument x expected to be a number.');
    }

    if (y !== null && y !== undefined && typeof y !== 'number') {
      throw new TypeError('Foo.sum(x, [y]): Argument [y] expected to be a number.');
    }

    return x + y;
  }

}"
`;

exports[`main should prepend a type checking to Foo#sum() because the checker tag is set to 'bar' 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns the sum of x, y (optional).
   *
   * @bar
   * @param {number} x The first number.
   * @param {number} [y=0] The second number.
   * @return {number} The sum of x and y.
   */
  sum(x, y = 0) {
    if (typeof x !== 'number') {
      throw new TypeError('Foo.sum(x, [y]): Argument x expected to be a number.');
    }

    if (y !== null && y !== undefined && typeof y !== 'number') {
      throw new TypeError('Foo.sum(x, [y]): Argument [y] expected to be a number.');
    }

    return x + y;
  }

}"
`;

exports[`main should prepend a type checking to Foo#sum() using Facebook's invariant 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns the sum of x, y (optional).
   *
   * @typechecked
   * @param {number} x The first number.
   * @param {number} [y=0] The second number.
   * @return {number} The sum of x and y.
   */
  sum(x, y = 0) {
    invariant(!(typeof x !== 'number'), 'Foo.sum(x, [y]): Argument x expected to be a number.');
    invariant(!(y !== null && y !== undefined && typeof y !== 'number'), 'Foo.sum(x, [y]): Argument [y] expected to be a number.');
    return x + y;
  }

}"
`;

exports[`main should prepend a type checking to Foo#sumArray() and Foo#sumArray2() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns a sum of all numbers stored in the array.
   *
   * @typechecked
   * @param {Array.<number>} arr An array of numbers.
   * @return {number} The sum of all numbers.
   */
  sumArray(arr) {
    if (Object.prototype.toString.call(arr) !== '[object Array]') {
      throw new TypeError('Foo.sumArray(arr): Argument arr expected to be an array.');
    }

    if (Object.prototype.toString.call(arr) === '[object Array]' && arr.length > 0 && typeof arr[0] !== 'number') {
      throw new TypeError('Foo.sumArray(arr): Argument arr[0] expected to be a number.');
    }

    return arr.reduce((total, x) => total + x, 0);
  }
  /**
   * Returns a sum of all numbers stored in inner arrays.
   *
   * @typechecked
   * @param {Array.<Array.<number>>} [arr] An array of arrays of
   *        numbers.
   * @return {number} The sum of all numbers.
   */


  sumArray2(arr) {
    if (arr !== null && arr !== undefined && Object.prototype.toString.call(arr) !== '[object Array]') {
      throw new TypeError('Foo.sumArray2([arr]): Argument [arr] expected to be an array.');
    }

    if (Object.prototype.toString.call(arr) === '[object Array]' && arr.length > 0 && Object.prototype.toString.call(arr[0]) !== '[object Array]') {
      throw new TypeError('Foo.sumArray2([arr]): Argument arr[0] expected to be an array.');
    }

    if (Object.prototype.toString.call(arr) === '[object Array]' && arr.length > 0 && Object.prototype.toString.call(arr[0]) === '[object Array]' && arr[0].length > 0 && typeof arr[0][0] !== 'number') {
      throw new TypeError('Foo.sumArray2([arr]): Argument arr[0][0] expected to be a number.');
    }

    return (arr || []).reduce((total, innerArr) => total + innerArr.reduce((total, x) => total + x, 0), 0);
  }

}"
`;

exports[`main should prepend a type checking to Foo#sumObj() and Foo#sumObj2() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns a sum of all numbers stored in the object.
   *
   * @typechecked
   * @param {Object.<string, number>} obj An object with numbers
   *        as property values.
   * @return {number} The sum of all numbers.
   */
  sumObj(obj) {
    if (Object.prototype.toString.call(obj) !== '[object Object]') {
      throw new TypeError('Foo.sumObj(obj): Argument obj expected to be an object.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && Object.keys && Object.keys(obj)[0] && typeof Object.keys(obj)[0] !== 'string') {
      throw new TypeError('Foo.sumObj(obj): Argument Object.keys(obj)[0] expected to be a string.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && Object.keys && Object.keys(obj)[0] && obj[Object.keys(obj)[0]] && typeof obj[Object.keys(obj)[0]] !== 'number') {
      throw new TypeError('Foo.sumObj(obj): Argument obj[Object.keys(obj)[0]] expected to be a number.');
    }

    return Object.keys(obj).reduce((total, key) => total + obj[key], 0);
  }
  /**
   * Returns a sum of all numbers stored in the object.
   *
   * @typechecked
   * @param {Object<string, number>=} obj An object with numbers
   *        as property values.
   * @return {number} The sum of all numbers.
   */


  sumObj2(obj) {
    if (obj !== null && obj !== undefined && Object.prototype.toString.call(obj) !== '[object Object]') {
      throw new TypeError('Foo.sumObj2(obj): Argument [obj] expected to be an object.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && Object.keys && Object.keys(obj)[0] && typeof Object.keys(obj)[0] !== 'string') {
      throw new TypeError('Foo.sumObj2(obj): Argument Object.keys(obj)[0] expected to be a string.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && Object.keys && Object.keys(obj)[0] && obj[Object.keys(obj)[0]] && typeof obj[Object.keys(obj)[0]] !== 'number') {
      throw new TypeError('Foo.sumObj2(obj): Argument obj[Object.keys(obj)[0]] expected to be a number.');
    }

    return Object.keys(obj).reduce((total, key) => total + obj[key], 0);
  }

}"
`;

exports[`main should prepend a type checking to Foo#toCAB() and Foo#toCAB2() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns a string representation of the object with c value
   * first, a value second and b value third.
   *
   * @typechecked
   * @param {{a: number, b: string, c}} obj An object with a, b
   *        and c properties.
   * @return {string} A string representation of the object in
   *         format 'cab'.
   */
  toCAB(obj) {
    if (Object.prototype.toString.call(obj) !== '[object Object]') {
      throw new TypeError('Foo.toCAB(obj): Argument obj expected to be an object.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && 'a' in obj && typeof obj['a'] !== 'number') {
      throw new TypeError('Foo.toCAB(obj): Argument obj[\\\\'a\\\\'] expected to be a number.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && 'b' in obj && typeof obj['b'] !== 'string') {
      throw new TypeError('Foo.toCAB(obj): Argument obj[\\\\'b\\\\'] expected to be a string.');
    }

    const {
      a,
      b,
      c
    } = obj;
    return String(c) + a + b;
  }
  /**
   * Returns a string representation of the object with c value
   * first, a value second and b value third.
   *
   * @typechecked
   * @param {{a: !number, b: ?string, c}=} obj An object with a, b
   *        and c properties.
   * @return {string} A string representation of the object in
   *         format 'cab'.
   */


  toCAB2(obj) {
    if (obj !== null && obj !== undefined && Object.prototype.toString.call(obj) !== '[object Object]') {
      throw new TypeError('Foo.toCAB2(obj): Argument [obj] expected to be an object.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && 'a' in obj && (typeof obj['a'] !== 'number' || obj['a'] === null)) {
      throw new TypeError('Foo.toCAB2(obj): Argument obj[\\\\'a\\\\'] expected to be a number.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && 'b' in obj && typeof obj['b'] !== 'string' && obj['b'] !== null) {
      throw new TypeError('Foo.toCAB2(obj): Argument obj[\\\\'b\\\\'] expected to be a string.');
    }

    const {
      a,
      b,
      c
    } = obj || {};
    return String(c) + a + b;
  }

}"
`;

exports[`main should prepend a type checking to Foo#toCBAD() and Foo#toCBAD2 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns a string representation of the object with c value
   * first, b value second, a value third and d value fourth.
   *
   * @typechecked
   * @param {Object} obj An object with a, b and c properties.
   * @param {number} obj.a Property a.
   * @param {string} [obj.b] Property b.
   * @param {*} obj.c Property c.
   * @param {string} d Value d.
   * @return {string} A string representation of the object in
   *         format 'cbad'.
   */
  toCBAD(obj, d) {
    if (Object.prototype.toString.call(obj) !== '[object Object]') {
      throw new TypeError('Foo.toCBAD(obj, obj.a, [obj.b], obj.c, d): Argument obj expected to be an object.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && 'a' in obj && typeof obj['a'] !== 'number') {
      throw new TypeError('Foo.toCBAD(obj, obj.a, [obj.b], obj.c, d): Argument obj[\\\\'a\\\\'] expected to be a number.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && 'b' in obj && obj['b'] !== null && obj['b'] !== undefined && typeof obj['b'] !== 'string') {
      throw new TypeError('Foo.toCBAD(obj, obj.a, [obj.b], obj.c, d): Argument [obj[\\\\'b\\\\']] expected to be a string.');
    }

    if (typeof d !== 'string') {
      throw new TypeError('Foo.toCBAD(obj, obj.a, [obj.b], obj.c, d): Argument d expected to be a string.');
    }

    const {
      a,
      b,
      c
    } = obj;
    return String(c) + b + a + d;
  }
  /**
   * Returns a string representation of the object with c value
   * first, b value second, a value third and d value fourth.
   *
   * @typechecked
   * @param {Object=} obj An object with a and inner properties.
   * @param {number=} obj.a Property a.
   * @param {Object=} obj.inner An inner object with b and c
   *        properties.
   * @param {?string} obj.inner.b Property b.
   * @param {*} obj.inner.c Property c.
   * @param {string} d Value d.
   * @return {string} A string representation of the object in
   *         format 'cbad'.
   */


  toCBAD2(obj, d) {
    if (obj !== null && obj !== undefined && Object.prototype.toString.call(obj) !== '[object Object]') {
      throw new TypeError('Foo.toCBAD2(obj, obj.a, obj.inner, obj.inner.b, obj.inner.c, d): Argument [obj] expected to be an object.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && 'a' in obj && obj['a'] !== null && obj['a'] !== undefined && typeof obj['a'] !== 'number') {
      throw new TypeError('Foo.toCBAD2(obj, obj.a, obj.inner, obj.inner.b, obj.inner.c, d): Argument [obj[\\\\'a\\\\']] expected to be a number.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && 'inner' in obj && obj['inner'] !== null && obj['inner'] !== undefined && Object.prototype.toString.call(obj['inner']) !== '[object Object]') {
      throw new TypeError('Foo.toCBAD2(obj, obj.a, obj.inner, obj.inner.b, obj.inner.c, d): Argument [obj[\\\\'inner\\\\']] expected to be an object.');
    }

    if (Object.prototype.toString.call(obj) === '[object Object]' && 'inner' in obj && Object.prototype.toString.call(obj['inner']) === '[object Object]' && 'b' in obj['inner'] && typeof obj['inner']['b'] !== 'string' && obj['inner']['b'] !== null) {
      throw new TypeError('Foo.toCBAD2(obj, obj.a, obj.inner, obj.inner.b, obj.inner.c, d): Argument obj[\\\\'inner\\\\'][\\\\'b\\\\'] expected to be a string.');
    }

    if (typeof d !== 'string') {
      throw new TypeError('Foo.toCBAD2(obj, obj.a, obj.inner, obj.inner.b, obj.inner.c, d): Argument d expected to be a string.');
    }

    const {
      a,
      inner
    } = obj || {};
    const {
      b,
      c
    } = inner || {};
    return String(c) + b + a + d;
  }

}"
`;

exports[`main should prepend a type checking to Foo#toString() 1`] = `
"/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns a string representing the object.
   *
   * @typechecked
   * @param {object} obj The object to be represented as
   *        a string.
   * @return {string} A string representing the object.
   */
  toString(obj) {
    if (Object.prototype.toString.call(obj) !== '[object Object]') {
      throw new TypeError('Foo.toString(obj): Argument obj expected to be an object.');
    }

    return obj.toString();
  }

}"
`;

exports[`main should prepend a type checking to generatePersonsHtml() 1`] = `
"/**
 * A person.
 * @typedef {Object} Person
 * @property {string} firstname A person's firstname.
 * @property {string} surname A person's surname.
 */

/**
 * A persons list.
 * @typedef {Array.<!Person>} PersonsList
 */

/**
 * Class Foo.
 */
class Foo {
  /**
   * Generates a HTML code containing all persons from the list.
   *
   * @typechecked
   * @param {PersonsList} personsList A persons list.
   * @return {string} A HTML code containing all persons.
   */
  generatePersonsHtml(personsList) {
    if (Object.prototype.toString.call(personsList) !== '[object Array]') {
      throw new TypeError('Foo.generatePersonsHtml(personsList): Argument personsList expected to be an array.');
    }

    if (Object.prototype.toString.call(personsList) === '[object Array]' && personsList.length > 0 && (Object.prototype.toString.call(personsList[0]) !== '[object Object]' || personsList[0] === null)) {
      throw new TypeError('Foo.generatePersonsHtml(personsList): Argument personsList[0] expected to be an object.');
    }

    if (Object.prototype.toString.call(personsList) === '[object Array]' && personsList.length > 0 && Object.prototype.toString.call(personsList[0]) === '[object Object]' && 'firstname' in personsList[0] && typeof personsList[0]['firstname'] !== 'string') {
      throw new TypeError('Foo.generatePersonsHtml(personsList): Argument personsList[0][\\\\'firstname\\\\'] expected to be a string.');
    }

    if (Object.prototype.toString.call(personsList) === '[object Array]' && personsList.length > 0 && Object.prototype.toString.call(personsList[0]) === '[object Object]' && 'surname' in personsList[0] && typeof personsList[0]['surname'] !== 'string') {
      throw new TypeError('Foo.generatePersonsHtml(personsList): Argument personsList[0][\\\\'surname\\\\'] expected to be a string.');
    }

    return '<ul>' + personsList.reduce((acc, value) => {
      return acc + \`<li>\${value.firstname} \${value.surname}</li>\`;
    }, '') + '</ul>';
  }

}"
`;

exports[`main should prepend a type checking to getFullName() 1`] = `
"/**
 * A person
 * @typedef {Object} Person
 * @property {string} firstname A person's firstname.
 * @property {string} surname A person's surname.
 */

/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns a full name of a person.
   *
   * @typechecked
   * @param {Person} person A person.
   * @return {string} The person's full name.
   */
  getFullName(person) {
    if (Object.prototype.toString.call(person) !== '[object Object]') {
      throw new TypeError('Foo.getFullName(person): Argument person expected to be an object.');
    }

    if (Object.prototype.toString.call(person) === '[object Object]' && 'firstname' in person && typeof person['firstname'] !== 'string') {
      throw new TypeError('Foo.getFullName(person): Argument person[\\\\'firstname\\\\'] expected to be a string.');
    }

    if (Object.prototype.toString.call(person) === '[object Object]' && 'surname' in person && typeof person['surname'] !== 'string') {
      throw new TypeError('Foo.getFullName(person): Argument person[\\\\'surname\\\\'] expected to be a string.');
    }

    return person.firstname + ' ' + person.surname;
  }

}"
`;

exports[`main should prepend a type checking to getPersonInfo() 1`] = `
"/**
 * A person's age.
 * @typedef {number} Age
 */

/**
 * A person.
 * @typedef {Object} Person
 * @property {string} firstname A person's firstname.
 * @property {string} surname A person's surname.
 * @property {Age} age A person's age.
 */

/**
 * Class Foo.
 */
class Foo {
  /**
   * Returns person's info.
   *
   * @typechecked
   * @param {Person} person A person.
   * @return {string} The person's full name.
   */
  getPersonInfo(person) {
    if (Object.prototype.toString.call(person) !== '[object Object]') {
      throw new TypeError('Foo.getPersonInfo(person): Argument person expected to be an object.');
    }

    if (Object.prototype.toString.call(person) === '[object Object]' && 'firstname' in person && typeof person['firstname'] !== 'string') {
      throw new TypeError('Foo.getPersonInfo(person): Argument person[\\\\'firstname\\\\'] expected to be a string.');
    }

    if (Object.prototype.toString.call(person) === '[object Object]' && 'surname' in person && typeof person['surname'] !== 'string') {
      throw new TypeError('Foo.getPersonInfo(person): Argument person[\\\\'surname\\\\'] expected to be a string.');
    }

    if (Object.prototype.toString.call(person) === '[object Object]' && 'age' in person && typeof person['age'] !== 'number') {
      throw new TypeError('Foo.getPersonInfo(person): Argument person[\\\\'age\\\\'] expected to be a number.');
    }

    const {
      age,
      firstname,
      surname
    } = person;
    return \`\${firstname} \${surname} (\${age})\`;
  }

}"
`;
